{"version":3,"sources":["requests.js","axios.js","Row.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","instance","axios","create","baseURL","opts","height","width","playersVars","autoplay","Row","title","fetchUrl","isLarged","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","then","url","console","log","urlParams","URLSearchParams","URL","search","catch","error","handleClick","src","poster_path","backdrop_path","alt","name","id","videoId","Banner","str","lght","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d6e04aff.chunk.js","sourcesContent":["const API_KEY = \"9651b1c1a0db31c4ee4037cf733006fb\";\r\n\r\nconst requests = {\r\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n\r\nexport default requests;\r\n","import axios from \"axios\";\r\n\r\n// base url\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport YouTube from \"react-youtube\";\r\nimport axios from \"./axios\";\r\nimport movieTrailer from 'movie-trailer'\r\nimport \"./Row.css\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original\";\r\nconst opts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playersVars: {\r\n        // https://developers.google.com/youtube/player_parameters\r\n\r\n        autoplay:1,\r\n    }\r\n}\r\nfunction Row({ title, fetchUrl, isLarged }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\")\r\n\r\n\r\n  // A snippet of code which runs based on a specific condition/varaible\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n  const handleClick = (movie) => {\r\nif(trailerUrl) {\r\n    setTrailerUrl(\"\")\r\n}else {\r\n    movieTrailer(movie?.title || \"\")\r\n    .then((url) => {\r\n        console.log(url)\r\n        const urlParams = new URLSearchParams(new URL(url).search)\r\n        // console.log(urlParams.get(\"v\"))\r\n        setTrailerUrl(urlParams.get(\"v\"))\r\n    })\r\n    .catch(error => console.error(error))\r\n}\r\n  }\r\n      \r\n  \r\n  return (\r\n    <div className='row'>\r\n      <h2> {title} </h2>\r\n      <div className='row__posters'>\r\n        {movies.map((movie) => (\r\n          <img\r\n            key={movie.id}\r\n            onClick={ () => handleClick(movie)}\r\n            className={`row__poster ${isLarged && \"row__posterLarge\"}`}\r\n            src={`${base_url}${\r\n              isLarged ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n          />\r\n        ))}  \r\n      </div>\r\n      \r\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n\r\n \r\n         \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport requests from \"./requests\";\r\nimport \"./Banner.css\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original\";\r\n\r\nfunction Banner() {\r\n  const [movie, setMovie] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(requests.fetchNetflixOriginals);\r\n      setMovie(\r\n        request.data.results[\r\n          Math.floor(Math.random() * request.data.results.length - 1)\r\n        ]\r\n      );\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  //truncate text at a given length\r\n  function truncate(str, lght) {\r\n    return str?.length > lght ? str.substr(0, lght - 1) + \"...\" : str;\r\n  }\r\n  return (\r\n    <header\r\n      className='banner'\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundImage: `url(\"${base_url}${movie?.backdrop_path}\")`,\r\n        backgroundPosition: \"center center\",\r\n      }}>\r\n      <div className='banner__contents'>\r\n        <h1 className='banner__title'>\r\n          {movie?.title || movie?.name || movie?.original_name}\r\n        </h1>\r\n        <div className='banner__buttons'>\r\n          <button className='banner__button'>Play</button>\r\n          <button className='banner__button'>My List</button>\r\n        </div>\r\n        <h1 className='banner__description'>\r\n          {truncate(movie?.overview, 150)}\r\n        </h1>\r\n      </div>\r\n      <div className='banner--fadeBottom'></div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import \"./Nav.css\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nfunction Nav() {\r\n  const [show, handleShow] = useState(false);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      if (window.scrollY > 100) {\r\n        handleShow(true);\r\n      } else {\r\n        handleShow(false);\r\n      }\r\n    });\r\n    return () => {\r\n      window.removeEventListener(\"scroll\");\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`nav ${show && \"nav--black\"}`}>\r\n      <img\r\n        className='nav__logo'\r\n        src='https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg'\r\n        alt='Netflix Logo'\r\n      />\r\n      <img\r\n        className='nav__avatar'\r\n        src='https://noirflix.netlify.app/imgs/icon1.png'\r\n        alt='Avatar Logo'\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import \"./App.css\";\nimport requests from \"./requests\";\nimport Row from \"./Row.js\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\";\nfunction App() {\n  return (\n    <div className='App'>\n      <Nav />\n      <Banner />\n      <Row\n        title='NETFLIX ORIGINALS'\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLarged\n      />\n\n      <Row title='Trending Now' fetchUrl={requests.fetchTrending} />\n      <Row title='Top Rated' fetchUrl={requests.fetchTopRated} />\n      <Row title='Action Movie' fetchUrl={requests.fetchActionMovies} />\n      <Row title='Comedy Movies' fetchUrl={requests.fetchComedyMovies} />\n      <Row title='Horror Movies' fetchUrl={requests.fetchHorrorMovies} />\n      <Row title='Romance Movies' fetchUrl={requests.fetchRomanceMovies} />\n      <Row title='Documentaries' fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n "],"sourceRoot":""}